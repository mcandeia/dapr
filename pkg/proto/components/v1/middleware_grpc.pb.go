// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: dapr/proto/components/v1/middleware.proto

package components

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HttpMiddlewareClient is the client API for HttpMiddleware service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HttpMiddlewareClient interface {
	Init(ctx context.Context, in *MetadataRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Handle(ctx context.Context, opts ...grpc.CallOption) (HttpMiddleware_HandleClient, error)
	// Ping the state store. Used for liveness porpuses.
	Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type httpMiddlewareClient struct {
	cc grpc.ClientConnInterface
}

func NewHttpMiddlewareClient(cc grpc.ClientConnInterface) HttpMiddlewareClient {
	return &httpMiddlewareClient{cc}
}

func (c *httpMiddlewareClient) Init(ctx context.Context, in *MetadataRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/dapr.proto.components.v1.HttpMiddleware/Init", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *httpMiddlewareClient) Handle(ctx context.Context, opts ...grpc.CallOption) (HttpMiddleware_HandleClient, error) {
	stream, err := c.cc.NewStream(ctx, &HttpMiddleware_ServiceDesc.Streams[0], "/dapr.proto.components.v1.HttpMiddleware/Handle", opts...)
	if err != nil {
		return nil, err
	}
	x := &httpMiddlewareHandleClient{stream}
	return x, nil
}

type HttpMiddleware_HandleClient interface {
	Send(*CommandResponse) error
	Recv() (*Command, error)
	grpc.ClientStream
}

type httpMiddlewareHandleClient struct {
	grpc.ClientStream
}

func (x *httpMiddlewareHandleClient) Send(m *CommandResponse) error {
	return x.ClientStream.SendMsg(m)
}

func (x *httpMiddlewareHandleClient) Recv() (*Command, error) {
	m := new(Command)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *httpMiddlewareClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/dapr.proto.components.v1.HttpMiddleware/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HttpMiddlewareServer is the server API for HttpMiddleware service.
// All implementations should embed UnimplementedHttpMiddlewareServer
// for forward compatibility
type HttpMiddlewareServer interface {
	Init(context.Context, *MetadataRequest) (*emptypb.Empty, error)
	Handle(HttpMiddleware_HandleServer) error
	// Ping the state store. Used for liveness porpuses.
	Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
}

// UnimplementedHttpMiddlewareServer should be embedded to have forward compatible implementations.
type UnimplementedHttpMiddlewareServer struct {
}

func (UnimplementedHttpMiddlewareServer) Init(context.Context, *MetadataRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Init not implemented")
}
func (UnimplementedHttpMiddlewareServer) Handle(HttpMiddleware_HandleServer) error {
	return status.Errorf(codes.Unimplemented, "method Handle not implemented")
}
func (UnimplementedHttpMiddlewareServer) Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}

// UnsafeHttpMiddlewareServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HttpMiddlewareServer will
// result in compilation errors.
type UnsafeHttpMiddlewareServer interface {
	mustEmbedUnimplementedHttpMiddlewareServer()
}

func RegisterHttpMiddlewareServer(s grpc.ServiceRegistrar, srv HttpMiddlewareServer) {
	s.RegisterService(&HttpMiddleware_ServiceDesc, srv)
}

func _HttpMiddleware_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HttpMiddlewareServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dapr.proto.components.v1.HttpMiddleware/Init",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HttpMiddlewareServer).Init(ctx, req.(*MetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HttpMiddleware_Handle_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HttpMiddlewareServer).Handle(&httpMiddlewareHandleServer{stream})
}

type HttpMiddleware_HandleServer interface {
	Send(*Command) error
	Recv() (*CommandResponse, error)
	grpc.ServerStream
}

type httpMiddlewareHandleServer struct {
	grpc.ServerStream
}

func (x *httpMiddlewareHandleServer) Send(m *Command) error {
	return x.ServerStream.SendMsg(m)
}

func (x *httpMiddlewareHandleServer) Recv() (*CommandResponse, error) {
	m := new(CommandResponse)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _HttpMiddleware_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HttpMiddlewareServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dapr.proto.components.v1.HttpMiddleware/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HttpMiddlewareServer).Ping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// HttpMiddleware_ServiceDesc is the grpc.ServiceDesc for HttpMiddleware service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HttpMiddleware_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dapr.proto.components.v1.HttpMiddleware",
	HandlerType: (*HttpMiddlewareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Init",
			Handler:    _HttpMiddleware_Init_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _HttpMiddleware_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Handle",
			Handler:       _HttpMiddleware_Handle_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "dapr/proto/components/v1/middleware.proto",
}
